{
    "operator": {
        "title": "C언어 연산자"
        ,"text": "C언어 연산자에 대한 설명입니다. 더 자세히 알아보고 싶은 정보를 클릭해주세요."
        ,"image" : "https://storage.cloud.google.com/devi_storage_1518/lani/c_img/operator.png"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.operator_img"
                ,"label": "사진으로 보시겠어요?"
            }
            ,{
                "action": "block"
                ,"blockId": "c.operator_detail"
                ,"label": "말로 설명해줄께요!"
            }
        ]
    },
    "operator_detail_simpleText" : {
        "text": "다음 중 궁금한 연산자를 선택해주세요!!"
    },
    "operator_detail_quick" :[
        {
            "label": "=",
            "action": "message",
            "messageText": "대입연산자입니다."                    

        },
        {
            "label": "+, -, /, %, *",
            "action": "message",
            "messageText": "산술연산자입니다."                    

        },
        {
            "label": "!, ~, ++, --, *, &,",
            "action": "message",
            "messageText": "단항연산자입니다."                    

        },
        {
            "label": "&, ^, |",
            "action": "message",
            "messageText": "논리연산자입니다."                    

        },
        {
            "label": ">>, <<",
            "action": "message",
            "messageText": "이동연산자입니다."                    

        },
        {
            "label": "<, >, <=, >=, ==, !=",
            "action": "message",
            "messageText": "관계연산자입니다."                    

        },
        {
            "label": "&&, ||",
            "action": "message",
            "messageText": "논리연산자입니다."                    

        },
        {
            "label": "?:",
            "action": "message",
            "messageText": "삼항연산자입니다."                    

        },
        {
            "label": "*=, +=, -=....",
            "action": "message",
            "messageText": "복합대입연산자입니다."                    

        } 
    ],
    "comments" : {
        "text":  "c언어에서 주석을 사용하려면 한줄주석은 '//'뒤에 붙이고 여러줄 주석은 '/*'와 '*/'사이에 넣으면 됩니다."
    },
    
    "printf" : {
        "title": "printf 함수 사용법"
        ,"text": "printf() 함수는 c언어의 표준 출력 함수로, 여러 종류의 데이터를 다양한 서식에 맞추어 출력할 수 있습니다."
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.ex_printf"
                ,"label": "printf() 예제"
            }
            ,{
                "action": "block"
                ,"blockId": "c.format_specifier"
                ,"label": "형식 지정자를 살펴보세요!"
            }
        ]
    },
    "format_specifier" : {
        "title": "C언어 형식지정자입니다."
        , "text":  "printf, scanf를 사용하고 싶을 때 참고하세요!"
        , "image" : "https://storage.cloud.google.com/devi_storage_1518/lani/c_img/format%20specifier.png" 
    },
    "ex_printf" : {
        "image" : "---------"
        , "text": "printf 사용법"
    },
    "scanf" : {
        "title": "scanf 함수 사용법"
        ,"text": "우리가 프로그램에 직접 입력을 주고자 할 때 자주 쓰는 함수로 scanf 함수가 있습니다. scanf(\"입력받을 형태\", &변수명);과 같이 쓰면 된다. 입력받는 형태에 들어가는 형식지정자를 주의해야 한다."
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.ex_scanf"
                ,"label": "scanf() 예제"
            }
            ,{
                "action": "block"
                ,"blockId": "c.format_specifier"
                ,"label": "형식 지정자를 살펴보세요!"
            }
            ,{
                "action": "block"
                ,"blockId": "c.scanf_s"
                ,"label": "scanf_s는 뭔가요?"
            }
        ]
    },
    "ex_scanf" : {
        "image" : "---------"
        , "text": "scanf 사용법"
    },
    "scanf_s" :{
        "text": "scanf_s는 기존의 scanf에서 문자열의 크기를 받지 않아도 되도록 바뀐 함수에요. overflow가 발생하는 것을 예방하기 위해 만들어졌고, VS2010이상 컴파일러에서는 scanf_s를 사용하도록 권장하고 있습니다! 들어가는 인자는 scanf와 같아요."
    },
    "recursive" :{
        "title": "recursive 함수 사용법"
        ,"text": "재귀함수(recursion function)는 특정 숫자를 인수로 받아서 인수의 크기를 줄이며 base case에 도달할 때까지 자기 자신을 호출하는 함수입니다. base case란 반복문에서 탈출조건에 해당하는 부분이에요. 예제와 함께 볼까요?"
        ,"image" : "----"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "m29esodcdkijxqneidpfnyii"
                ,"label": "recursive 예제"
            }
        ]
    },
    "func" :{
        "title": "C언어에서의 함수란?"
        ,"text": "함수는 특정 기능을 하는 코드를 하나로 묶어 명령어처럼 사용할 수 있게 해줍니다. 반복되는 작업을 함수로 묶는다면 코드의 효율성을 키울 수 있겠죠! 함수를 선언하는 식은 (반환형) (함수명(매개변수)){함수의 몸체}로 구성됩니다. 각각을 자세히 알아볼까요?"
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.func_returnvalue"
                ,"label": "반환형"
            }
            ,{
                "action": "block"
                ,"blockId": "func_parameter"
                ,"label": "매개변수"
            }
            ,{
                "action": "block"
                ,"blockId": "c.ex_func"
                ,"label": "함수 사용 예시"
            }
        ]
    },
    "func_returnvalue" :{
        "title": "함수의 반환형이란?"
        ,"text": "반환형이란 함수의 실행을 마친 뒤 돌려주는 결과값의 자료형입니다. 실제로 반환되는 값은 반환값, 리턴값이라 하고 만약 반환이 필요없을 때는 void 자료형을 써줍니다."
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.ex_func1"
                ,"label": "반환형(O) 매개변수(X)"
            }
            ,{
                "action": "block"
                ,"blockId": "c.ex_func2"
                ,"label": "반환형(O) 매개변수(O)"
            }
        ]
    },
    "func_parameter" :{
        "title": "함수의 매개변수란?"
        ,"text": "매개변수, 인자 또는 파라미터라고 부릅니다. 인자는 원하는 개수만큼 선언할 수 있고 필요없다면 쓰지 않을수도 있습니다. 그러나 함수를 사용하려고 호출할 때에는 매개변수의 개수와 자료형을 맞추어 주어야 합니다."
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.ex_func3"
                ,"label": "매개변수(O) 반환형(X)"
            }
            ,{
                "action": "block"
                ,"blockId": "c.ex_func4"
                ,"label": "매개변수(O) 반환형(O)"
            }
        ]
    },
    "ex_func" :{
        "title": "함수의 사용법을 알아볼까요?"
        ,"text": "매개변수와 반환형의 유무에 따른 예제를 살펴봅시다!"
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.ex_func1"
                ,"label": "반환형(O) 매개변수(X)"
            }
            ,{
                "action": "block"
                ,"blockId": "c.ex_func2"
                ,"label": "반환형(O) 매개변수(O)"
            }
            ,{
                "action": "block"
                ,"blockId": "c.ex_func3"
                ,"label": "반환형(X) 매개변수(O)"
            }
            ,{
                "action": "block"
                ,"blockId": "c.ex_func4"
                ,"label": "반환형(X) 매개변수(X)"
            }
            
        ]
    },
    "ex_func1" : {
        "image" : "---------"
        , "text": "func 사용법"
    },
    "ex_func2" : {
        "image" : "---------"
        , "text": "func 사용법"
    },
    "ex_func3" : {
        "image" : "---------"
        , "text": "func 사용법"
    },
    "ex_func4" : {
        "image" : "---------"
        , "text": "func 사용법"
    },
    "control" :{
        "title": "제어문의 사용법을 알아볼까요?"
        ,"text": "제어문은 조건문과 반복문으로 나뉩니다. 궁금한 제어문을 골라보세요!"
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.control_ifelse"
                ,"label": "if else문"
            }
            ,{
                "action": "block"
                ,"blockId": "c.control_switch"
                ,"label": "switch문"
            }
            ,{
                "action": "block"
                ,"blockId": "c.control_forloop"
                ,"label": "for문"
            }
            ,{
                "action": "block"
                ,"blockId": "c.control_dowhile"
                ,"label": "while문"
            }    
        ]
    },
    "control_ifelse" : {
        "title": "if else문은 어떻게 사용할까요?"
        ,"text": "if {}안에는 처음에 검사할 조건이 들어가요. 계속 조건을 검사하고 싶다면 else if{}를 반복적으로 쓰고 괄호에 계속 조건을 추가해주면 돼요! 마지막까지 조건에 걸리지 않은 수행은 마지막에 오는 else{}로 잡을 수도 있고, 이 부분을 쓰지 않으면 별도의 처리를 하지 않을 수도 있어요!"
        ,"image" : "--"
    },
    "control_switch" : {
        "title": "switch문은 어떻게 사용할까요?"
        ,"text": "switch-case문을 사용하려면 우선 switch()의 괄호 안에 조건을 판단할 변수를 넣어줘야 해요. 각 조건에 따른 경우의 수를 case : 뒤에 넣어주면 됩니다. 아래 예제를 보며 자세히 알아볼까요?"
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.control_switch_s"
                ,"label": "문자로 switch 쓰기"
            }
            ,{
                "action": "block"
                ,"blockId": "c.control_switch_s"
                ,"label": "숫자로 switch 쓰기"
            }
        ]
    },
    "control_switch_s" :{
        "image" : "---------"
        , "text": "switch_s 사용법"
    },
    "control_switch_c" :{
        "image" : "---------"
        , "text": "switch_c 사용법"
    },
    "control_forloop" : {
        "title": "for문은 어떻게 사용할까요?"
        ,"text": "for문을 사용한다면 반복자(iterator)를 넣어서 원하는 만큼 출력을 내보낼 수 있습니다. 형식은 for(초기값;탈출조건;증감식){실행할 코드}에요!"
        ,"image" : "--"
    },
    "control_while" : {
        "title": "while문은 어떻게 사용할까요?"
        ,"text": "while loop는 조건을 주고 조건이 달성될 때까지  코드를 계속 반복시키는 반복문이에요. while(조건문){실행할 코드}의 형식으로 사용됩니다. 이 코드는 조건에 맞지 않으면 한번도 실행되지 않을 수 있어요. 반면 do while 문은 일단 코드를 한번 실행시키고 다음 턴부터 조건을 검사해 실행시킵니다. 형식은 do{실행할 코드}while(조건문)이에요!"
        ,"image" : "--"
    },
    "stdlib" :{
        "title": "표준 라이브러리가 무엇인가요?"
        ,"text": "C 표준 라이브러리는 C언어를 구현할 때 여러 코드에서 통용될 수 있도록 만들어진 라이브러리로, ANCI C 표준에 의해 명시되었습니다. 이것을 응용 프로그램에서 사용할 수 있도록 API가 헤더 파일들에 정의되어 있습니다."
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.stdlib_header"
                ,"label": "헤더파일이 무엇인가요?"
            }
        ]
    },
    "stdlib_header" : {
        "text": "헤더파일이란 비슷한 역할을 하는 함수의 정의를 묶어놓은 것으로, 표준 라이브러리 함수들이 이 위치에 선언되어 있습니다. 일반적으로 다른 소스 파일 속의 첫 부분에 포함됩니다. 우리가 주로 쓰는 헤더파일은 <stdio.h>라고 하는 표준 입출력 함수입니다. 자세한 정보가 알고 싶으시다면 아래 링크를 참고해 주세요! https://ko.wikipedia.org/wiki/C_%ED%91%9C%EC%A4%80_%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC"
    },
    "namingrule" :{
        "text" : "코드의 일관성을 위해 가장 중요한 것은 이름 규칙을 따르는 것입니다. 이름의 스타일이 있다면 이를 통해 요소의 선언부를 찾지 않고도 해당 요소가 어떤 것인지 바로 알 수 있기 때문이죠! 자세한 naming rule은 아래 링크를 참고해 주세요.   https://yeop-blog.github.io/2017/09/29/2017-09-29-old-blog-post29/"
    },
    "struct" :{
        "title": "구조체가 무엇인가요?"
        ,"text": "학생 100명의 시험 점수를 받고 싶다면 배열을 사용하면 되었습니다. 그런데 만약 100명의 이름과 학번, 국어, 수학, 영어 성적과 집주소까지 받고 싶다면 어떻게 해야 할까요? 바로 구조체로 묶으면 되겠습니다! 예제와 함께 보겠습니다."
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.ex_struct"
                ,"label": "구조체 예제"
            }
        ]
    },
    "ex_struct" :{
        "image" : "---------"
        , "text": "structure 사용법"
    },
    "array" :{
        "title": "배열이 무엇인지 알아볼까요?"
        ,"text": "학생 100명의 테스트 점수를 받고 싶다면 int형 변수를 100개 선언하는 것이 좋을까요?? 다행이도 우리에겐 배열이 있습니다! 우리는 test[100]이라는 문장을 이용해 손쉽게 100명의 시험점수를 저장할 수 있어요!"
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.ex_array1"
                ,"label": "숫자 배열 예제"
            }
            ,{
                "action": "block"
                ,"blockId": "c.ex_array2"
                ,"label": "문자 배열 예제"
            }
            ,{
                "action": "block"
                ,"blockId": "c.array2dim"
                ,"label": "2차원 배열"
            }
            ,{
                "action": "block"
                ,"blockId": "c.arrayandpointer"
                ,"label": "배열과 포인터의 관계"
            }    
        ]
    },
    "ex_array1" :{
        "image" : "---------"
        , "text": "문자형 array 사용법"
    },
    "ex_array2" :{
        "image" : "---------"
        , "text": "숫자형 array 사용법"
    },
    "array2dim" :{
        "title": "2차원 배열이 무엇인가요?"
        ,"text": "1차원 배열이 책꽃이 한 줄이었다면, 2차원 배열은 한 벽면이 모두 책꽂이라고 생각하면 되겠습니다. 배열의 선언방식은 int arr[3][4]와 같이 (자료형) (배열이름)[가로크기][세로크기]로 선언하면 돼요. 예제와 함께 볼까요?"
        ,"image" : "--"
        ,"buttons": [
            {
                "action": "block"
                ,"blockId": "c.ex_array2dim"
                ,"label": "2차원 배열 예제"
            }
        ]
    },
    "ex_array2dim" :{
        "image" : "---------"
        , "text": "2차원 배열 사용법"
    }
}
